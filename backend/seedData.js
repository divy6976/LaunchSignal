const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
require('dotenv').config();

// Import models
const User = require('./model/usermodel');
const Feedback = require('./model/feedbackModel');

// Startup schema (same as in controller)
const startupSchema = new mongoose.Schema({
    founderId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    name: {
        type: String,
        required: true,
        minlength: 2,
        trim: true
    },
    tagline: {
        type: String,
        required: true,
        minlength: 10,
        trim: true
    },
    description: {
        type: String,
        required: true,
        minlength: 50
    },
    industry: {
        type: String,
        required: true
    },
    categories: {
        type: [String],
        required: true
    },
    businessType: {
        type: String,
        enum: ["B2B", "B2C"],
        required: true
    },
    targetAudience: {
        type: String,
        required: true
    },
    website: {
        type: String,
        required: true,
        match: [/^https?:\/\/.+/, "Please enter a valid URL"]
    }
}, { timestamps: true });

const Startup = mongoose.model('Startup', startupSchema);

// Connect to MongoDB
const connectDB = async () => {
    try {
        await mongoose.connect("mongodb+srv://Divy:Divy%406976@startupindia.q0igqmy.mongodb.net/devTINDER");
        console.log('MongoDB connected for seeding');
    } catch (error) {
        console.error('MongoDB connection error:', error);
        process.exit(1);
    }
};

// Sample users data
const sampleUsers = [
    {
        fullName: "Aarav Sharma",
        email: "aarav@example.com",
        password: "password123",
        role: "founder",
        interests: ["SaaS", "AI/ML", "DevTools"]
    },
    {
        fullName: "Priya Patel",
        email: "priya@example.com", 
        password: "password123",
        role: "adopter",
        interests: ["SaaS", "Productivity", "Automation"]
    },
    {
        fullName: "Rohan Singh",
        email: "rohan@example.com",
        password: "password123", 
        role: "adopter",
        interests: ["AI/ML", "DevTools", "Content"]
    },
    {
        fullName: "Anjali Gupta",
        email: "anjali@example.com",
        password: "password123",
        role: "founder", 
        interests: ["FinTech", "E-commerce", "HealthTech"]
    },
    {
        fullName: "Vikram Kumar",
        email: "vikram@example.com",
        password: "password123",
        role: "adopter",
        interests: ["Social Media", "Content", "Entertainment"]
    }
];

// Sample startups data
const sampleStartups = [
    {
        name: "CodeGenius",
        tagline: "The AI powered assistant that writes your boilerplate code",
        description: "CodeGenius is an intelligent code generation platform that helps developers write boilerplate code faster. Our AI understands your coding patterns and generates high-quality, production-ready code snippets. Perfect for developers who want to focus on business logic rather than repetitive coding tasks.",
        industry: "Technology",
        categories: ["SaaS", "AI/ML", "DevTools"],
        businessType: "B2B",
        targetAudience: "Software developers and engineering teams",
        website: "https://codegenius.ai"
    },
    {
        name: "Shaflex",
        tagline: "Write once, customize everywhere - the ultimate content management platform",
        description: "Shaflex revolutionizes content creation by allowing you to write content once and customize it for multiple platforms. Whether it's social media posts, blog articles, or marketing copy, Shaflex adapts your content to fit any platform's requirements while maintaining your unique voice and style.",
        industry: "Technology", 
        categories: ["Content", "Social Media", "Productivity"],
        businessType: "B2C",
        targetAudience: "Content creators, marketers, and social media managers",
        website: "https://shaflex.com"
    },
    {
        name: "aiCode.fail",
        tagline: "The fastest way to trust AI-generated code",
        description: "aiCode.fail provides comprehensive testing and validation for AI-generated code. Our platform automatically reviews, tests, and validates code generated by AI tools, ensuring it meets production standards. Built for teams who want to leverage AI coding assistants safely and effectively.",
        industry: "Technology",
        categories: ["DevTools", "AI/ML", "SaaS"],
        businessType: "B2B", 
        targetAudience: "Development teams and software engineers",
        website: "https://aicode.fail"
    },
    {
        name: "EzyDocs",
        tagline: "Documentation made simple with AI-powered assistance",
        description: "EzyDocs transforms how teams create and maintain documentation. Our AI-powered platform automatically generates, updates, and organizes technical documentation. From API docs to user manuals, EzyDocs ensures your documentation is always accurate, up-to-date, and easy to understand.",
        industry: "Technology",
        categories: ["SaaS", "Productivity", "DevTools"],
        businessType: "B2B",
        targetAudience: "Technical teams and documentation managers", 
        website: "https://ezydocs.io"
    },
    {
        name: "TaskFlow",
        tagline: "Streamline your workflow with intelligent task automation",
        description: "TaskFlow is an intelligent workflow automation platform that helps teams streamline their processes. Our AI learns from your team's patterns and suggests optimizations, automates repetitive tasks, and ensures nothing falls through the cracks. Perfect for growing teams looking to scale efficiently.",
        industry: "Technology",
        categories: ["Productivity", "Automation", "SaaS"],
        businessType: "B2B",
        targetAudience: "Project managers and team leads",
        website: "https://taskflow.app"
    },
    {
        name: "SocialSync",
        tagline: "Unified social media management for the modern creator",
        description: "SocialSync brings all your social media platforms under one roof. Schedule posts, track analytics, engage with your audience, and grow your following across all major platforms. Our AI-powered insights help you understand what content resonates with your audience and optimize your social media strategy.",
        industry: "Technology",
        categories: ["Social Media", "Content", "Analytics"],
        businessType: "B2C",
        targetAudience: "Content creators and social media managers",
        website: "https://socialsync.co"
    }
];

// Sample feedback data
const sampleFeedback = [
    {
        comment: "Loved CodeGenius! The autocomplete for SQL queries is a lifesaver. It saved me hours of work on my last project.",
        startupId: null, // Will be set after startups are created
        userId: null // Will be set after users are created
    },
    {
        comment: "Shaflex is great but its UI is a little bit mobile. The concept is amazing though, just needs better responsive design.",
        startupId: null,
        userId: null
    },
    {
        comment: "aiCode.fail looks promising, but I couldn't figure out how to add team members. The onboarding could be clearer.",
        startupId: null,
        userId: null
    },
    {
        comment: "EzyDocs has been a game-changer for our team. The AI-generated documentation is surprisingly accurate and saves us so much time.",
        startupId: null,
        userId: null
    },
    {
        comment: "TaskFlow's automation features are incredible. It's like having a personal assistant for project management.",
        startupId: null,
        userId: null
    },
    {
        comment: "SocialSync helped me grow my Instagram following by 200% in just 3 months. The analytics insights are spot-on.",
        startupId: null,
        userId: null
    }
];

// Seed function
const seedDatabase = async () => {
    try {
        console.log('🌱 Starting database seeding...');
        
        // Clear existing data
        await User.deleteMany({});
        await Startup.deleteMany({});
        await Feedback.deleteMany({});
        console.log('🗑️  Cleared existing data');

        // Create users
        console.log('👥 Creating users...');
        const createdUsers = [];
        for (const userData of sampleUsers) {
            // Don't hash password here, let the pre-save middleware handle it
            const user = await User.create(userData);
            createdUsers.push(user);
            console.log(`✅ Created user: ${user.fullName} (${user.role})`);
        }

        // Create startups
        console.log('🚀 Creating startups...');
        const createdStartups = [];
        const founders = createdUsers.filter(user => user.role === 'founder');
        
        for (let i = 0; i < sampleStartups.length; i++) {
            const startupData = sampleStartups[i];
            const founder = founders[i % founders.length]; // Distribute startups among founders
            
            const startup = await Startup.create({
                ...startupData,
                founderId: founder._id
            });
            createdStartups.push(startup);
            console.log(`✅ Created startup: ${startup.name} (by ${founder.fullName})`);
        }

        // Create feedback
        console.log('💬 Creating feedback...');
        const adopters = createdUsers.filter(user => user.role === 'adopter');
        
        for (let i = 0; i < sampleFeedback.length; i++) {
            const feedbackData = sampleFeedback[i];
            const startup = createdStartups[i % createdStartups.length];
            const adopter = adopters[i % adopters.length];
            
            const feedback = await Feedback.create({
                comment: feedbackData.comment,
                startupId: startup._id,
                userId: adopter._id
            });
            console.log(`✅ Created feedback: "${feedback.comment.substring(0, 50)}..." (by ${adopter.fullName} for ${startup.name})`);
        }

        console.log('🎉 Database seeding completed successfully!');
        console.log('\n📊 Summary:');
        console.log(`👥 Users: ${createdUsers.length}`);
        console.log(`🚀 Startups: ${createdStartups.length}`);
        console.log(`💬 Feedback: ${sampleFeedback.length}`);
        
        console.log('\n🔑 Test Credentials:');
        console.log('Founders:');
        founders.forEach(founder => {
            console.log(`  Email: ${founder.email}, Password: password123`);
        });
        console.log('Adopters:');
        adopters.forEach(adopter => {
            console.log(`  Email: ${adopter.email}, Password: password123`);
        });

    } catch (error) {
        console.error('❌ Seeding failed:', error);
    } finally {
        await mongoose.connection.close();
        console.log('🔌 Database connection closed');
        process.exit(0);
    }
};

// Run seeding
connectDB().then(() => {
    seedDatabase();
}).catch(err => {
    console.error('Failed to connect to database:', err);
    process.exit(1);
});
